/**********************************************************************************************

Copyright   :   2014 baKno Games. All Rights reserved.        info@bakno.com

This software is licensed to the purchaser only; you cannot redistribute it or any portion of it. 
But you can use this software within a Unity project to build any type of application including 
commercial applications.

This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
either express or implied. In no event will the authors be held liable for any damages 
arising from the use of this software.

**********************************************************************************************/

using UnityEngine;
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.IO;

public class CaptureAvi : SingletonMonoBehaviour<CaptureAvi>
{
    static int videoRate;
    static int microSecs;
    static int frameWidth;
    static int frameHeight;
    static System.Text.UTF8Encoding Encoding = new System.Text.UTF8Encoding();
    const int audioRate=25;
    const float audioRateDelta = 1f/ audioRate;
    static public bool recOutput=false;
    static List<byte> byteFrames = new List<byte>();
    static List<byte> byteSamples = new List<byte>();
    static int frameIndex = -1;
    static List<List<byte>> byteFrame = new List<List<byte>>();
    static List<List<byte>> byteSample = new List<List<byte>>();
    static Texture2D tex;
    static List<int> sizes = new List<int>();
    static List<int> padds = new List<int>();
    static int biggestFrame = 0;
    static public bool grabbing = false;
    static float totalTime;
    static int imageQuality = 50;

   
    //void OnAudioFilterRead(float[] data, int channels)
    //{
    //    if (recOutput) ConvertAndWrite(data);
    //}

    //void ConvertAndWrite(float[] dataSource)
    //{
    //    short[] intData = new short[dataSource.Length];
    //    byte[] bytesData = new byte[dataSource.Length * 2];
    //    int rescaleFactor = 32767;
    //    for (int i = 0; i < dataSource.Length; i++)
    //    {
    //        intData[i] = System.Convert.ToInt16(Mathf.Clamp(dataSource[i] * rescaleFactor, -32768, 32767));
    //        byte[] byteArr = new byte[2];
    //        byteArr = System.BitConverter.GetBytes(intData[i]);
    //        byteArr.CopyTo(bytesData, i * 2);
    //    }
    //    byteSamples.AddRange(bytesData);
    //}

    public IEnumerator CheckFrame()
    {
        do
        {
            yield return new WaitForEndOfFrame();
            if (this.recVideo)
            {
                if (Time.unscaledDeltaTime < 5f)
                {
                    capTime += Time.unscaledDeltaTime;
                }
                if (capTime >= audioRateDelta)
                {
                    capTime -= audioRateDelta;
                }
                else
                    continue;

                if (tex == null)
                {
                    frameWidth = Screen.width;
                    frameHeight = Screen.height;
                    tex = new Texture2D(frameWidth, frameHeight, TextureFormat.RGB24, false);
                }

                frameIndex = frameIndex + 1;
                byteFrame.Add(new List<byte>());
                tex.ReadPixels(new Rect(0, 0, frameWidth, frameHeight), 0, 0, false);
                byte[] frame = tex.EncodeToJPG(imageQuality);
                byteFrame[frameIndex].AddRange(System.BitConverter.GetBytes(1667510320));
                sizes.Add(frame.Length);
                byteFrame[frameIndex].AddRange(System.BitConverter.GetBytes(frame.Length));
                byteFrame[frameIndex].AddRange(frame);
                if (frame.Length % 2 == 1)
                {
                    byteFrame[frameIndex].Add((byte)0);
                    padds.Add(1);
                }
                else
                {
                    padds.Add(0);
                }
                if (frame.Length > biggestFrame) biggestFrame = frame.Length;
            }

        } while (true);
        
    }
    static public byte[] GetBinary()
    {
        int audioChunksize;
        Destroy(tex);
        tex = null;
        audioChunksize = (byteSamples.Count / frameIndex);
        if ((audioChunksize % 4) > 0) audioChunksize = audioChunksize + 4 - (audioChunksize % 4);
        for (int i = 0; i < frameIndex; i++)
        {
            byteSample.Add(new List<byte>());
            byteSample[i].AddRange(System.BitConverter.GetBytes(1651978544));
            if ((i + 1) * audioChunksize <= byteSamples.Count)
            {
                byteSample[i].AddRange(System.BitConverter.GetBytes(audioChunksize));
                byteSample[i].AddRange(byteSamples.GetRange(i * audioChunksize, audioChunksize));
            }
            else
            {
                if (byteSamples.Count > (i * audioChunksize))
                {
                    byteSample[i].AddRange(System.BitConverter.GetBytes(byteSamples.Count - (i * audioChunksize)));
                    byteSample[i].AddRange(byteSamples.GetRange(i * audioChunksize, byteSamples.Count - (i * audioChunksize)));
                }
            }
        }
        for (int i = 0; i < frameIndex; i++)
        {
            byteFrames.AddRange(byteFrame[i]);
            byteFrames.AddRange(byteSample[i]);
        }
        totalTime = 1.0f * frameIndex /  audioRate;
        videoRate = audioRate;// Mathf.RoundToInt(frameIndex / totalTime);
        microSecs = Mathf.RoundToInt(1000000 / videoRate);
        List<byte> byteList = new List<byte>();
        byteList.AddRange(Encoding.GetBytes("RIFF"));
        byteList.AddRange(System.BitConverter.GetBytes(byteFrames.Count + (32 * frameIndex) + 326));
        byteList.AddRange(Encoding.GetBytes("AVI "));
        byteList.AddRange(Encoding.GetBytes("LIST"));
        byteList.AddRange(System.BitConverter.GetBytes(294));
        byteList.AddRange(Encoding.GetBytes("hdrl"));
        byteList.AddRange(Encoding.GetBytes("avih"));
        byteList.AddRange(System.BitConverter.GetBytes(56));
        byteList.AddRange(System.BitConverter.GetBytes(microSecs));
        byteList.AddRange(System.BitConverter.GetBytes(biggestFrame * videoRate + 5880));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(272));
        byteList.AddRange(System.BitConverter.GetBytes(frameIndex));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(2));
        byteList.AddRange(System.BitConverter.GetBytes(biggestFrame + 5880));
        byteList.AddRange(System.BitConverter.GetBytes(frameWidth));
        byteList.AddRange(System.BitConverter.GetBytes(frameHeight));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(Encoding.GetBytes("LIST"));
        byteList.AddRange(System.BitConverter.GetBytes(116));
        byteList.AddRange(Encoding.GetBytes("strl"));
        byteList.AddRange(Encoding.GetBytes("strh"));
        byteList.AddRange(System.BitConverter.GetBytes(56));
        byteList.AddRange(Encoding.GetBytes("vids"));
        byteList.AddRange(Encoding.GetBytes("MJPG"));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(1000));
        byteList.AddRange(System.BitConverter.GetBytes(videoRate * 1000));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(frameIndex));
        byteList.AddRange(System.BitConverter.GetBytes(biggestFrame));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(ByteShort(frameWidth));
        byteList.AddRange(ByteShort(frameHeight));
        byteList.AddRange(Encoding.GetBytes("strf"));
        byteList.AddRange(System.BitConverter.GetBytes(40));
        byteList.AddRange(System.BitConverter.GetBytes(40));
        byteList.AddRange(System.BitConverter.GetBytes(frameWidth));
        byteList.AddRange(System.BitConverter.GetBytes(frameHeight));
        byteList.AddRange(ByteShort(1));
        byteList.AddRange(ByteShort(24));
        byteList.AddRange(Encoding.GetBytes("MJPG"));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(Encoding.GetBytes("LIST"));
        byteList.AddRange(System.BitConverter.GetBytes(94));
        byteList.AddRange(Encoding.GetBytes("strl"));
        byteList.AddRange(Encoding.GetBytes("strh"));
        byteList.AddRange(System.BitConverter.GetBytes(56));
        byteList.AddRange(Encoding.GetBytes("auds"));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(1));
        byteList.AddRange(System.BitConverter.GetBytes(audioRate));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        int tempIntt = byteSamples.Count / 4;
        byteList.AddRange(System.BitConverter.GetBytes(tempIntt));
        byteList.AddRange(System.BitConverter.GetBytes(audioChunksize));
        byteList.AddRange(System.BitConverter.GetBytes(4294967295));
        byteList.AddRange(System.BitConverter.GetBytes(4));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(System.BitConverter.GetBytes(0));
        byteList.AddRange(Encoding.GetBytes("strf"));
        byteList.AddRange(System.BitConverter.GetBytes(18));
        byteList.AddRange(ByteShort(1));
        byteList.AddRange(ByteShort(2));
        byteList.AddRange(System.BitConverter.GetBytes(audioRate));
        byteList.AddRange(System.BitConverter.GetBytes(audioRate * 4));
        byteList.AddRange(ByteShort(4));
        byteList.AddRange(ByteShort(16));
        byteList.AddRange(ByteShort(0));
        byteList.AddRange(Encoding.GetBytes("LIST"));
        byteList.AddRange(System.BitConverter.GetBytes(byteFrames.Count + 4));
        byteList.AddRange(Encoding.GetBytes("movi"));
        byteList.AddRange(byteFrames);
        byteList.AddRange(Encoding.GetBytes("idx1"));
        byteList.AddRange(System.BitConverter.GetBytes(frameIndex * 32));
        int tempInt = 4;
        for (int i = 0; i < frameIndex; i++)
        {
            byteList.AddRange(System.BitConverter.GetBytes(1667510320));
            byteList.AddRange(System.BitConverter.GetBytes(16));
            if (i > 0) tempInt = tempInt + audioChunksize + 8;
            byteList.AddRange(System.BitConverter.GetBytes(tempInt));
            byteList.AddRange(System.BitConverter.GetBytes(sizes[i]));
            byteList.AddRange(System.BitConverter.GetBytes(1651978544));
            byteList.AddRange(System.BitConverter.GetBytes(16));
            tempInt = tempInt + sizes[i] + padds[i] + 8;
            byteList.AddRange(System.BitConverter.GetBytes(tempInt));
            byteList.AddRange(System.BitConverter.GetBytes(audioChunksize));
        }
        byte[] BinAvi = new byte[byteList.Count];
        for (int i = 0; i < byteList.Count; i++) BinAvi[i] = byteList[i];
        byteFrames.Clear();
        byteSamples.Clear();
        byteFrame.Clear();
        byteSample.Clear();
        
        sizes.Clear();
        padds.Clear();
        frameIndex = -1;
        return BinAvi;
    }
    

    static List<byte> ByteShort(int largo)
    {
        List<byte> result = new List<byte>();
        byte[] num = System.BitConverter.GetBytes(largo);
        result.Add((byte)num[0]);
        result.Add((byte)num[1]);
        return result;
    }

    private bool recVideo;
    private float capTime=0;

    void Start()
    {
        StartCoroutine(CheckFrame());
    }

    void Update()
    {
       
    }

    void OnDisable()
    {
        if(IsCapturing())
        {
            StopCapture();
        }
    }
    

    public bool IsCapturing()
    {
        return recVideo;
    }

    public void StartCapture()
    {
        if(recVideo)
        {
            Debuger.LogError("重复开始");
            return;
        }
        Debuger.LogError("开始录制");
        recVideo = true;
    }

    public void StopCapture()
    {
        if (!recVideo)
        {
            Debuger.LogError("重复结束");
            return;
        }
        recVideo = false;
        var bin = GetBinary();

        string dir = Application.dataPath.Substring(0, Application.dataPath.Length - 7) + "/Capture";
        if (!Directory.Exists(dir))
            Directory.CreateDirectory(dir);

        string path = string.Format("{0}/{1}.avi", dir, System.DateTime.Now.ToString("MM月dd日 HH-mm-ss"));
        File.WriteAllBytes(path, bin);
        Debuger.LogError("结束录制,视频地址:{0}",path);

    }
}